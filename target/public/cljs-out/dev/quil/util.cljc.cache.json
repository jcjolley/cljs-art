["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "],"~$p5",["^ ","~$prototype",["^ "]]],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$quil.util","~:imports",null,"~:requires",["^ ","~$cstr","~$clojure.string","^>","^>"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$clj-compilation?",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","C:\\Users\\jolle\\dev\\art\\perlin\\target\\public\\cljs-out\\dev\\quil\\util.cljc","~:line",76,"~:column",7,"~:end-line",76,"~:end-column",23,"~:arglists",["~#list",["~$quote",["^K",[[]]]]]],"^9","~$quil.util/clj-compilation?","~:variadic",false,"^E","target\\public\\cljs-out\\dev\\quil\\util.cljc","^I",23,"~:method-params",["^K",[[]]],"~:protocol-impl",null,"~:arglists-meta",["^K",[null,null]],"^G",1,"^F",76,"^H",76,"~:max-fixed-arity",0,"~:fn-var",true,"^J",["^K",["^L",["^K",[[]]]]]],"~$make-quil-constant-map",["^ ","^C",null,"^D",["^ ","^E","C:\\Users\\jolle\\dev\\art\\perlin\\target\\public\\cljs-out\\dev\\quil\\util.cljc","^F",102,"^G",7,"^H",102,"^I",29,"^J",["^K",["^L",["^K",[["~$target","~$const-map-name","~$const-map"]]]]]],"^9","~$quil.util/make-quil-constant-map","^N",false,"^E","target\\public\\cljs-out\\dev\\quil\\util.cljc","^I",29,"^O",["^K",[["^U","^V","^W"]]],"^P",null,"^Q",["^K",[null,null]],"^G",1,"^F",102,"^H",102,"^R",3,"^S",true,"^J",["^K",["^L",["^K",[["^U","^V","^W"]]]]]],"~$clj-unchecked-int",["^ ","^C",null,"^D",["^ ","^E","C:\\Users\\jolle\\dev\\art\\perlin\\target\\public\\cljs-out\\dev\\quil\\util.cljc","^F",115,"^G",7,"^H",115,"^I",24,"^J",["^K",["^L",["^K",[["~$v"]]]]],"~:doc","In clojure it does unchecked-int and does nothing in cljs.\n  Needed to handle colors in hex form in clojure."],"^9","~$quil.util/clj-unchecked-int","^N",false,"^E","target\\public\\cljs-out\\dev\\quil\\util.cljc","^I",24,"^O",["^K",[["~$v"]]],"^P",null,"^Q",["^K",[null,null]],"^G",1,"^F",115,"^H",115,"^R",1,"^S",true,"^J",["^K",["^L",["^K",[["~$v"]]]]],"^Z","In clojure it does unchecked-int and does nothing in cljs.\n  Needed to handle colors in hex form in clojure."],"~$initial-internal-state",["^ ","^D",["^ ","^E","C:\\Users\\jolle\\dev\\art\\perlin\\target\\public\\cljs-out\\dev\\quil\\util.cljc","^F",9,"^G",6,"^H",9,"^I",28],"^9","~$quil.util/initial-internal-state","^E","target\\public\\cljs-out\\dev\\quil\\util.cljc","^I",28,"^G",1,"^F",9,"^H",9,"~:tag","~$cljs.core/IMap","^Z","Internal state map used to initiate all sketches."],"~$print-definition-list",["^ ","^C",null,"^D",["^ ","^E","C:\\Users\\jolle\\dev\\art\\perlin\\target\\public\\cljs-out\\dev\\quil\\util.cljc","^F",65,"^G",7,"^H",65,"^I",28,"^J",["^K",["^L",["^K",[["~$definitions"]]]]]],"^9","~$quil.util/print-definition-list","^N",false,"^E","target\\public\\cljs-out\\dev\\quil\\util.cljc","^I",28,"^O",["^K",[["^15"]]],"^P",null,"^Q",["^K",[null,null]],"^G",1,"^F",65,"^H",65,"^R",1,"^S",true,"^J",["^K",["^L",["^K",[["^15"]]]]]],"~$generate-quil-constants",["^ ","^C",null,"^D",["^ ","^E","C:\\Users\\jolle\\dev\\art\\perlin\\target\\public\\cljs-out\\dev\\quil\\util.cljc","^F",109,"^G",11,"^H",109,"^I",34,"~:macro",true,"^J",["^K",["^L",["^K",[["^U","~$&","~$opts"]]]]],"~:top-fn",["^ ","^N",true,"^R",3,"^O",[["^K",["~$&form","~$&env","^U","^19"]]],"^J",["^K",[["^1;","^1<","^U","~$&","^19"]]],"^Q",["^K",[null]]]],"^9","~$quil.util/generate-quil-constants","^N",true,"^E","target\\public\\cljs-out\\dev\\quil\\util.cljc","^I",34,"^1:",["^ ","^N",true,"^R",3,"^O",[["^K",["^1;","^1<","^U","^19"]]],"^J",["^K",[["^1;","^1<","^U","~$&","^19"]]],"^Q",["^K",[null]]],"^O",[["^K",["^1;","^1<","^U","^19"]]],"^P",null,"^Q",["^K",[null]],"^G",1,"^F",109,"^18",true,"^H",109,"^R",3,"^S",false,"^J",["^K",[["^1;","^1<","^U","~$&","^19"]]]],"~$resolve-constant-key",["^ ","^C",null,"^D",["^ ","^E","C:\\Users\\jolle\\dev\\art\\perlin\\target\\public\\cljs-out\\dev\\quil\\util.cljc","^F",32,"^G",7,"^H",32,"^I",27,"^J",["^K",["^L",["^K",[["~$key","~$mappings"]]]]],"^Z","Returns the val associated with key in mappings or key directly if it\n  is one of the vals in mappings. Otherwise throws an exception."],"^9","~$quil.util/resolve-constant-key","^N",false,"^E","target\\public\\cljs-out\\dev\\quil\\util.cljc","^I",27,"^O",["^K",[["^1?","^1@"]]],"^P",null,"^Q",["^K",[null,null]],"^G",1,"^F",32,"^H",32,"^R",2,"^S",true,"^J",["^K",["^L",["^K",[["^1?","^1@"]]]]],"^Z","Returns the val associated with key in mappings or key directly if it\n  is one of the vals in mappings. Otherwise throws an exception."],"~$no-fn",["^ ","^C",null,"^D",["^ ","^E","C:\\Users\\jolle\\dev\\art\\perlin\\target\\public\\cljs-out\\dev\\quil\\util.cljc","^F",5,"^G",7,"^H",5,"^I",12,"^J",["^K",["^L",["^K",[[]]]]],"^Z","Function that does nothing."],"^9","~$quil.util/no-fn","^N",false,"^E","target\\public\\cljs-out\\dev\\quil\\util.cljc","^I",12,"^O",["^K",[[]]],"^P",null,"^Q",["^K",[null,null]],"^G",1,"^F",5,"^H",5,"^R",0,"^S",true,"^J",["^K",["^L",["^K",[[]]]]],"^Z","Function that does nothing."],"~$prepare-quil-clj-constants",["^ ","^C",null,"^D",["^ ","^E","C:\\Users\\jolle\\dev\\art\\perlin\\target\\public\\cljs-out\\dev\\quil\\util.cljc","^F",90,"^G",7,"^H",90,"^I",33,"^J",["^K",["^L",["^K",[["~$constants"]]]]]],"^9","~$quil.util/prepare-quil-clj-constants","^N",false,"^E","target\\public\\cljs-out\\dev\\quil\\util.cljc","^I",33,"^O",["^K",[["^1E"]]],"^P",null,"^Q",["^K",[null,null]],"^G",1,"^F",90,"^H",90,"^R",1,"^S",true,"^J",["^K",["^L",["^K",[["^1E"]]]]]],"~$prepare-quil-cljs-constants",["^ ","^C",null,"^D",["^ ","^E","C:\\Users\\jolle\\dev\\art\\perlin\\target\\public\\cljs-out\\dev\\quil\\util.cljc","^F",96,"^G",7,"^H",96,"^I",34,"^J",["^K",["^L",["^K",[["^1E"]]]]]],"^9","~$quil.util/prepare-quil-cljs-constants","^N",false,"^E","target\\public\\cljs-out\\dev\\quil\\util.cljc","^I",34,"^O",["^K",[["^1E"]]],"^P",null,"^Q",["^K",[null,null]],"^G",1,"^F",96,"^H",96,"^R",1,"^S",true,"^J",["^K",["^L",["^K",[["^1E"]]]]]],"~$length-of-longest-key",["^ ","^C",null,"^D",["^ ","^E","C:\\Users\\jolle\\dev\\art\\perlin\\target\\public\\cljs-out\\dev\\quil\\util.cljc","^F",44,"^G",8,"^H",44,"^I",29,"~:private",true,"^J",["^K",["^L",["^K",[["~$m"]]]]],"^Z","Returns the length of the longest key of map m. Assumes m's keys are strings\n   and returns 0 if map is empty:\n   (length-of-longest-key {\"foo\" 1 \"barr\" 2 \"bazzz\" 3}) ;=> 5\n   (length-of-longest-key {}) ;=> 0"],"^1J",true,"^9","~$quil.util/length-of-longest-key","^N",false,"^E","target\\public\\cljs-out\\dev\\quil\\util.cljc","^I",29,"^O",["^K",[["~$m"]]],"^P",null,"^Q",["^K",[null,null]],"^G",1,"^F",44,"^H",44,"^R",1,"^S",true,"^J",["^K",["^L",["^K",[["~$m"]]]]],"^Z","Returns the length of the longest key of map m. Assumes m's keys are strings\n   and returns 0 if map is empty:\n   (length-of-longest-key {\"foo\" 1 \"barr\" 2 \"bazzz\" 3}) ;=> 5\n   (length-of-longest-key {}) ;=> 0"],"~$gen-padding",["^ ","^C",null,"^D",["^ ","^1J",true,"^E","C:\\Users\\jolle\\dev\\art\\perlin\\target\\public\\cljs-out\\dev\\quil\\util.cljc","^I",19,"^1:",["^ ","^N",false,"^R",3,"^O",["^K",[["~$len"],["^1M","~$pad"],["~$s","^1M","^1N"]]],"^J",["^K",[["^1M"],["^1M","^1N"],["~$s","^1M","^1N"]]],"^Q",["^K",[null,null,null]]],"^G",8,"^F",53,"^H",53,"^J",["^K",["^L",["^K",[["^1M"],["^1M","^1N"],["~$s","^1M","^1N"]]]]],"^Z","Generates a padding string starting concatting s with len times pad:\n   (gen-padding \"\" 5 \"b\") ;=> \"bbbbb\"\n   May be called without starting string s in which case it defaults to the\n   empty string and also without pad in which case it defaults to a single space"],"^1J",true,"^9","~$quil.util/gen-padding","^N",false,"^E","target\\public\\cljs-out\\dev\\quil\\util.cljc","^I",19,"^1:",["^ ","^N",false,"^R",3,"^O",["^K",[["^1M"],["^1M","^1N"],["~$s","^1M","^1N"]]],"^J",["^K",[["^1M"],["^1M","^1N"],["~$s","^1M","^1N"]]],"^Q",["^K",[null,null,null]]],"^O",["^K",[["^1M"],["^1M","^1N"],["~$s","^1M","^1N"]]],"^P",null,"^Q",["^K",[null,null,null]],"^G",1,"^F",53,"^H",53,"^R",3,"^S",true,"^J",["^K",[["^1M"],["^1M","^1N"],["~$s","^1M","^1N"]]],"^Z","Generates a padding string starting concatting s with len times pad:\n   (gen-padding \"\" 5 \"b\") ;=> \"bbbbb\"\n   May be called without starting string s in which case it defaults to the\n   empty string and also without pad in which case it defaults to a single space"],"~$prepare-quil-name",["^ ","^C",null,"^D",["^ ","^E","C:\\Users\\jolle\\dev\\art\\perlin\\target\\public\\cljs-out\\dev\\quil\\util.cljc","^F",85,"^G",7,"^H",85,"^I",24,"^J",["^K",["^L",["^K",[["~$const-keyword"]]]]]],"^9","~$quil.util/prepare-quil-name","^N",false,"^E","target\\public\\cljs-out\\dev\\quil\\util.cljc","^I",24,"^O",["^K",[["^1Q"]]],"^P",null,"^Q",["^K",[null,null]],"^G",1,"^F",85,"^H",85,"^R",1,"^S",true,"^J",["^K",["^L",["^K",[["^1Q"]]]]]]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^8",["~:frame-rate","~:else","~$do","~:looping?","~$js/p5.prototype","~:clj","~$cljs.core/aget","~$def"]],"~:order",["^1W","^1Z","^1X","^21","^1[","^22","^20","^1Y"]],"^Z","Utility fns"]